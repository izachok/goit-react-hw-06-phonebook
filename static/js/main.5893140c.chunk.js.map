{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allyProps","className","s","button","contactsActions","addContact","createAction","name","phoneNumber","payload","id","uuid","deleteContact","changeFilter","getContacts","state","items","getFilteredContacts","filter","getFilter","contacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useSelector","dispatch","useDispatch","length","isInContacts","alert","initialValues","validationSchema","Yup","matches","required","onSubmit","values","resetForm","form","label","fieldInput","component","validatorError","ContactList","list","map","item","itemName","itemPhone","size","Filter","onChange","e","target","value","App","createReducer","actions","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistedStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5893140c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","import React from 'react';\nimport s from './FormButton.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function FormButton({\n  type = 'button',\n  onClick,\n  disabled = false,\n  children,\n  ...allyProps\n}) {\n  return (\n    <button\n      type={type}\n      className={s.button}\n      disabled={disabled}\n      onClick={onClick}\n      {...allyProps}\n    >\n      {children}\n    </button>\n  );\n}\n\nFormButton.propTypes = {\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    .isRequired,\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport { v1 as uuid } from 'uuid';\n\nconst addContact = createAction('contacts/add', (name, phoneNumber) => ({\n  payload: {\n    id: uuid(),\n    name,\n    phoneNumber,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\n\nexport default contactsActions;\n","export const getContacts = state => state.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = state => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import * as Yup from 'yup';\n\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport FormButton from '../FormButton/FormButton';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getContacts } from './../../redux/contacts/contacts-selectors';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const isInContacts = name => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter(contact => contact.name.toLowerCase().includes(name))\n        .length > 0\n    );\n  };\n\n  const addContact = ({ name, phoneNumber }) => {\n    if (isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsActions.addContact(name, phoneNumber));\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', phoneNumber: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .matches(\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\",\n            )\n            .required(),\n          phoneNumber: Yup.string()\n            .matches(\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +',\n            )\n            .required(),\n        })}\n        onSubmit={(values, { resetForm }) => {\n          addContact(values);\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.label}>\n            Name:\n            <Field className={s.fieldInput} name=\"name\" type=\"text\" />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <label className={s.label}>\n            Phone number:\n            <Field className={s.fieldInput} name=\"phoneNumber\" type=\"tel\" />\n            <ErrorMessage\n              name=\"phoneNumber\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport FormButton from '../FormButton';\nimport { MdDelete } from 'react-icons/md';\nimport React from 'react';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, phoneNumber }) => (\n        <li key={id} className={s.item}>\n          <span className={s.itemName}>{name}</span>\n          <span className={s.itemPhone}>{phoneNumber}</span>\n          <FormButton\n            onClick={() => dispatch(contactsActions.deleteContact(id))}\n            aria-label=\"Delete contact\"\n          >\n            <MdDelete size=\"18\" />\n          </FormButton>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => {\n            dispatch(contactsActions.changeFilter(e.target.value));\n          }}\n          className={s.fieldInput}\n        />\n      </label>\n    </div>\n  );\n}\n","import './App.css';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import actions from './contacts-actions';\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n","import {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n  persistReducer,\n  persistStore,\n} from 'redux-persist';\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\n\nconst LOCAL_STORAGE_CONTACTS = 'contacts';\n\nconst contactsPersistConfig = {\n  key: LOCAL_STORAGE_CONTACTS,\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nconst persistor = persistStore(store);\n\nconst persistedStore = { store, persistor };\n\nexport default persistedStore;\n","import './index.css';\n\nimport App from './App';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"itemName\":\"ContactList_itemName__3linx\",\"itemPhone\":\"ContactList_itemPhone__2aABR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2-gNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};"],"sourceRoot":""}